Index: app.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import FastAPI, Form, File, UploadFile, Request, Response, HTTPException\nfrom fastapi.responses import FileResponse, HTMLResponse, RedirectResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.templating import Jinja2Templates\nimport sqlite3\nfrom sqlite3 import Error\nimport json\nimport update_database, create_database\nfrom pydantic import BaseModel\nimport os\nfrom docx import Document\nimport test\nimport logging\nimport base64\nimport multipart\nfrom typing import List\nimport jinja2\nfrom fastapi.middleware.cors import CORSMiddleware\n\n\napp = FastAPI()\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # REMEMBER TO FIX\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.mount(\"/static\", StaticFiles(directory=\"static\"), name=\"static\")\ntemplates = Jinja2Templates(directory=\"templates\")\n\n\nDATABASE = 'database.db'\n\n@app.post(\"/log\")\nasync def log_message(request: Request):\n    log_data = await request.json()\n    message = log_data.get(\"message\", \"\")\n    level = log_data.get(\"level\", \"info\").lower()\n\n    logger = logging.getLogger(\"uvicorn\")\n\n    if level == \"debug\":\n        logger.debug(message)\n    elif level == \"info\":\n        logger.info(message)\n    elif level == \"warning\":\n        logger.warning(message)\n    elif level == \"error\":\n        logger.error(message)\n    else:\n        raise HTTPException(status_code=400, detail=\"Invalid log level\")\n\n    return {\"message\": \"Log received\", \"level\": level, \"log_message\": message}\n\ndef get_db_connection():\n    conn = None\n    try:\n        conn = sqlite3.connect(DATABASE)\n    except Error as e:\n        print(e)\n    return conn\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def index():\n    with open(\"templates/index.html\", \"r\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content)\n\n@app.get(\"/login\", response_class=HTMLResponse)\nasync def get_login():\n    with open(\"templates/login.html\", \"r\", encoding=\"utf-8\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content)\n\n@app.get(\"/signup\", response_class=HTMLResponse)\nasync def get_signup():\n    with open(\"templates/signup.html\", \"r\", encoding=\"utf-8\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content)\n\n@app.get(\"/manual_signup\", response_class=HTMLResponse)\nasync def get_manual_signup():\n    with open(\"templates/manual_signup.html\", \"r\", encoding=\"utf-8\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content)\n\n@app.post(\"/submit-cover-letter/{uuid}\")\nasync def submit_cover_letter(uuid: str, coverLetterText: str = Form(...)):\n    cover_letter_content = test.main(coverLetterText)\n\n    directory = 'temporary_files'\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    filename = f\"Cover_Letter_for_{uuid}.docx\"\n    filepath = os.path.join(directory, filename)\n\n    doc = Document()\n    doc.add_paragraph(cover_letter_content)\n    doc.save(filepath)\n\n    return FileResponse(filepath, media_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', filename=filename)\n\n@app.post(\"/submit-cv/{uuid}\")\nasync def submit_cover_letter(uuid: str, coverLetterText: str = Form(...)):\n    print(\"Adi stop picking your lips\")\n\n@app.get(\"/generate-cover-letter/{uuid}\", response_class=HTMLResponse)\nasync def generate_cover_letter(uuid: str):\n    with open(\"templates/generate_cover_letter.html\", \"r\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content.replace(\"{{uuid}}\", uuid))\n\n@app.get(\"/generate-cv/{uuid}\", response_class=HTMLResponse)\nasync def generate_cv(uuid: str):\n    with open(\"templates/generate_cv.html\", \"r\") as f:\n        html_content = f.read()\n    return HTMLResponse(content=html_content.replace(\"{{uuid}}\", uuid))\n\nclass SubmitFormSchema(BaseModel):\n    contact_info: str\n    professional_summary: str\n    education: str\n    projects: str\n    work_experience: str\n    skills: str\n    languages: str\n    volunteering: str\n\n@app.post(\"/submit_form\")\nasync def submit_form(body: SubmitFormSchema):\n    contact_info_data = json.loads(body.contact_info)\n    education_data = json.loads(body.education)\n    projects_data = json.loads(body.projects)\n    work_experience_data = json.loads(body.work_experience)\n    skills_data = json.loads(body.skills)\n    languages_data = json.loads(body.languages)\n    professional_summary = body.professional_summary\n    volunteering_data = json.loads(body.volunteering)\n\n    print(contact_info_data)\n    print(education_data)\n    print(projects_data)\n    print(work_experience_data)\n    print(skills_data)\n    print(languages_data)\n    print(volunteering_data)\n\n    conn = update_database.create_connection(\"database.db\")\n\n    applicant_uuid = update_database.insert_applicant(conn, (\n        json.dumps(contact_info_data),\n        professional_summary\n        # photo_base64\n    ))\n\n    for edu in education_data:\n        update_database.insert_education(conn, (applicant_uuid,) + tuple(edu.values()))\n\n    for work in work_experience_data:\n        update_database.insert_work_experience(conn, (applicant_uuid,) + tuple(work.values()))\n\n    for project in projects_data:\n        update_database.insert_project(conn, (applicant_uuid,) + tuple(project.values()))\n\n    for skill in skills_data:\n        update_database.insert_skills(conn, (applicant_uuid,) + tuple(skill.values()))\n\n    for language in languages_data:\n        update_database.insert_language(conn, (applicant_uuid,) + tuple(language.values()))\n\n    for vol in volunteering_data:\n        update_database.insert_volunteering(conn, (applicant_uuid,) + tuple(vol.values()))\n\n    return {\"success\": True, \"message\": \"Data submitted successfully\", \"applicant_uuid\": str(applicant_uuid)}\n\n@app.post(\"/login\")\nasync def post_login(uuid: str = Form(...)):\n    return RedirectResponse(url=f\"/dashboard/{uuid}\", status_code=303)\n\n@app.post(\"/edit_data/{uuid}\", response_class=HTMLResponse)\nasync def edit_data(uuid: str):\n    user_data = update_database.get_all_applicant_data(uuid)\n    # COMPLETE ILAI :)))\n\n@app.get(\"/dashboard/{uuid}\", response_class=HTMLResponse)\nasync def dashboard(request: Request, uuid: str):\n    print(uuid)\n    conn = get_db_connection()\n    if conn:\n        applicant = update_database.get_applicant(conn, uuid)\n        if applicant:\n            print(applicant)\n            contact_info = json.loads(applicant[1])\n            return templates.TemplateResponse(\"dashboard.html\",\n                                              {\"request\": request,\n                                               \"contact_info\": contact_info,\n                                               \"applicant\": applicant})\n        else:\n            return RedirectResponse(url=\"/login?error=UUID not found\", status_code=303)\n    else:\n        return RedirectResponse(url=\"/login?error=Database connection error\", status_code=303)\n\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8080)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app.py b/app.py
--- a/app.py	
+++ b/app.py	
@@ -16,6 +16,8 @@
 from typing import List
 import jinja2
 from fastapi.middleware.cors import CORSMiddleware
+from CV_generator import create_CV
+
 
 
 app = FastAPI()
@@ -103,8 +105,21 @@
     return FileResponse(filepath, media_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document', filename=filename)
 
 @app.post("/submit-cv/{uuid}")
-async def submit_cover_letter(uuid: str, coverLetterText: str = Form(...)):
-    print("Adi stop picking your lips")
+async def submit_cv(uuid: str, coverLetterText: str = Form(...)):
+    directory = 'temporary_files'
+    if not os.path.exists(directory):
+        os.makedirs(directory)
+
+    # Assume you have a template document for the CV
+    template_document = 'cv_template.docx'
+
+    # Create or update the CV for the given UUID
+    cv_path = create_CV(uuid, coverLetterText, template_document)
+
+    # Use the created or updated CV path to return the document
+    return FileResponse(cv_path, media_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document',
+                        filename=os.path.basename(cv_path))
+
 
 @app.get("/generate-cover-letter/{uuid}", response_class=HTMLResponse)
 async def generate_cover_letter(uuid: str):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/workspace.xml	
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="d7191883-1665-4614-a209-38bd8bbf7787" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/config/certificate_pub.crt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/config/private.key" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/app.py" beforeDir="false" afterPath="$PROJECT_DIR$/app.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/database.db" beforeDir="false" afterPath="$PROJECT_DIR$/database.db" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/test.py" beforeDir="false" afterPath="$PROJECT_DIR$/test.py" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Python Script" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="ROOT_SYNC" value="DONT_SYNC" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 2
+}</component>
+  <component name="ProjectId" id="2cag1cA23TIkmCexUjNJ2wS9SCJ" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.CV_Improver.executor&quot;: &quot;Run&quot;,
+    &quot;Python.adiTry.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;last_opened_file_path&quot;: &quot;/Users/adialgazi/Documents/AI course/FInal Project/CV_Improver&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  }
+}</component>
+  <component name="RecentsManager">
+    <key name="CopyFile.RECENT_KEYS">
+      <recent name="$PROJECT_DIR$" />
+    </key>
+  </component>
+  <component name="RunManager">
+    <configuration name="CV_Improver" type="PythonConfigurationType" factoryName="Python">
+      <module name="CV_Improver" />
+      <option name="ENV_FILES" value="" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="IS_MODULE_SDK" value="false" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/app.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
+  </component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-python-sdk-50da183f06c8-2887949eec09-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-233.13135.95" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="d7191883-1665-4614-a209-38bd8bbf7787" name="Changes" comment="" />
+      <created>1708354891259</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1708354891259</updated>
+      <workItem from="1708354892867" duration="1572000" />
+      <workItem from="1708433017655" duration="578000" />
+      <workItem from="1710495582060" duration="40000" />
+      <workItem from="1710495624311" duration="14352000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="com.intellij.coverage.CoverageDataManagerImpl">
+    <SUITE FILE_PATH="coverage/CV_Improver$CV_Improver.coverage" NAME="CV_Improver Coverage Results" MODIFIED="1710761360444" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="" />
+    <SUITE FILE_PATH="coverage/CV_Improver$adiTry.coverage" NAME="adiTry Coverage Results" MODIFIED="1710496715523" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="true" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+  </component>
+</project>
\ No newline at end of file
Index: config/private.key
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/private.key b/config/private.key
new file mode 100644
--- /dev/null	
+++ b/config/private.key	
@@ -0,0 +1,24 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC5zo1B5jzUmVDM0F4AolyWnpU+
+Av9XXpx2URG1a0QOxQ2lWoVMin+lBQv3uhNdxiygwSzAO/C9gfBsgiDZ3lhL3/YJAhxL3+7MJQn+
+QHB6Gx/KlIkHo2HOSaBnflg2TfLMGhkTMwE7dhVDcKb6A1t/wtK/oSYfJLOSXwAVh0pEjDHrSrPY
+ocyWa56NyF915DDUbd324pVz230HBdo2QyxH18Zqs6wpD5aSOsJgtmtXc1DVjuKtTm6SIACMqL6Q
+CFoBt/10s6kqZeEsb7EqJBlXm32iGPwBW6oCj3jltayEN0tnaqXvHZurT6sxlb2qIcSUBiBeyh5q
+zVJfSjhIfIQJAgMBAAECggEAUepzMlNsDBqPmcxfNQ5fnXPKvi0aH42xkyQIl5/zwEM10emHjQge
+YEVKUmvxr8z3zeN8dD+40gOgWGZCT2sMKF9TnAMXMIhIQi4uKq6EKAEfUfOMOhbYvtaM5jO4djCF
+U2BKH8HD0FAt7a6TnvOt+jSNLzi/ksledbB2XAdqQa+AHaKVO9A6USl8Sph0Y6vHM/xMKIw1P+bj
+ganLJbCBxm5c+F9PgGP/L07mS+/iRwrAypphr7OZpQm6XpJRwhgpnb1Ger5mrdhkkXw8RWD3CT/Z
+v9Po8F3Z9vce7mCWVApY/UswTrCY187ylLfjO2VwaiRcKexPAFwYSMBD/BrZxQKBgQDHjc8D5K6h
+IQy8IBA6Aa7dgexabeo/VYDYkWfXVkBVA8TACgarFhA4XyaXV7EWmnz9yxYSQISVNG1FmunRGRnM
+hMSxocbGeUra2W6j+Q8tnohayL0/iqzF1TJReiZyq873HJfrXJ+9O0ejfdfwAxd40wCrCp7brbXN
+Dh9ImY9vLwKBgQDuXUgzj1rlV/lXeN4oMxMt2Gyw3ZdhU2rDtq84Naqdb3iByTKwbjx7JvdOCOdv
+PWjM9squOTpc2Myv7+xgvfKauej41qFG6sbHC5MElTx4KlGnfYHB+OVKXUnSX/Kq3s66K8HoGzTk
+E/mVmjg8LpQsIGLwvbegOfM26fDMJnqyRwKBgGXSVe8GoJRW6MiVE7KFaVRdFtyNeRkX58aZawLV
+X74BTkMu2ngxqdUZt/dBJ3sBGQXmujxV71Cyj48UnHm09RUGKdb5VROwkCFbELlaPARq/+hSxT3G
+5KGNRz+LtFKOl+w/CsVtXZSQyt0BOU2eRjvAbnbX1HcDC+C1dAD3WdjBAoGBAINcaw7nIOulWOdI
+1/2FcDtiuzuZUvSy+PKUuembQcRzixDTZZjvl2szJTUfGRQn3pqeI0JyjWRfoiYPbdA+vfVhITAJ
+cGXZuuQ0z7fF2sZKZCeOtjTEyu/5i1ZhxCVAluLofHtCixpqm7BDhlw8OzI6QuxzUT/+z7dio26O
+gi2/AoGAMabn5GP8ElTHfp0GL1yvY8uvaXWjBVTYLOFtW7SVTi0vZNuZRunm0DNTdyz8JkdqeqV/
+XFfY0UAfmM13AseLOrAiBlEPBNopzNUGGkjD7tBSq5my51TJYgKb8JM0ZttRJbCQXevlUu29Jotk
+vdXP5iov2zLAvDJStXf0k/aj6hQ=
+-----END PRIVATE KEY-----
\ No newline at end of file
Index: config/certificate_pub.crt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/config/certificate_pub.crt b/config/certificate_pub.crt
new file mode 100644
--- /dev/null	
+++ b/config/certificate_pub.crt	
@@ -0,0 +1,17 @@
+-----BEGIN CERTIFICATE-----
+MIIDTzCCAjegAwIBAgIJAKnAluCHiWKQMA0GCSqGSIb3DQEBCwUAMGcxCzAJBgNVBAYTAlVTMQsw
+CQYDVQQIDAJDQTEWMBQGA1UEBwwNU2FuIEZyYW5jaXNjbzEOMAwGA1UECgwFQWRvYmUxETAPBgNV
+BAsMCFNlY3VyaXR5MRAwDgYDVQQDDAdDb25zb2xlMB4XDTI0MDMxNTA5MjMyOVoXDTI1MDMxNTA5
+MjMyOVowZzELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRYwFAYDVQQHDA1TYW4gRnJhbmNpc2Nv
+MQ4wDAYDVQQKDAVBZG9iZTERMA8GA1UECwwIU2VjdXJpdHkxEDAOBgNVBAMMB0NvbnNvbGUwggEi
+MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC5zo1B5jzUmVDM0F4AolyWnpU+Av9XXpx2URG1
+a0QOxQ2lWoVMin+lBQv3uhNdxiygwSzAO/C9gfBsgiDZ3lhL3/YJAhxL3+7MJQn+QHB6Gx/KlIkH
+o2HOSaBnflg2TfLMGhkTMwE7dhVDcKb6A1t/wtK/oSYfJLOSXwAVh0pEjDHrSrPYocyWa56NyF91
+5DDUbd324pVz230HBdo2QyxH18Zqs6wpD5aSOsJgtmtXc1DVjuKtTm6SIACMqL6QCFoBt/10s6kq
+ZeEsb7EqJBlXm32iGPwBW6oCj3jltayEN0tnaqXvHZurT6sxlb2qIcSUBiBeyh5qzVJfSjhIfIQJ
+AgMBAAEwDQYJKoZIhvcNAQELBQADggEBAIPMtquu2IxcOLZys9Q+7C2MpeYXpbN0CaPHx5BxB80O
+D7+jzbeSbymv7eU4WzY37oTIsLlNe7KgjJuRqB2YOJJNvcd7YKuhELR0bKyp7OpV1Zz1URCuaGt8
+VpkQxahg72VIG26CvHYwkt6wCSuI/9VjHNbCP5k2klJ6J8TIr6mpnvQ1VhNm1YadkcAntj8xrkoE
+DXVfzXGT/zS+k3BsvC4wYX+N3tfvUhGVtqv1rLda+CHIpU1eO8TBNqtvKwWOBJjBIkcnJ2UKiJ9P
+1jDSYFNVdobgRKb3Ug9yicZq+m/DSOAEv5UCEItEIdgqeKhCa7L0lB5lVHhMQGNbFqXLWbY=
+-----END CERTIFICATE-----
\ No newline at end of file
